{"version":3,"file":"/Users/trevorhuey/code/internal-actions-public/.github/actions/npm-license-checker/src/run.ts","sources":["/Users/trevorhuey/code/internal-actions-public/.github/actions/npm-license-checker/src/run.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { DependencyType, RunOptions, DetailsOutputFormat } from './types';\nimport checkLicenses from './checkLicenses';\n\nexport default async function run({ core, licenseChecker }: RunOptions) {\n  try {\n    const dependencyType = core.getInput('dependency-type') as DependencyType;\n    const startPath = core.getInput('start-path');\n    const customFieldsPath = core.getInput('custom-fields-path');\n    const clarificationsPath = core.getInput('clarifications-path');\n    const onlyAllow = core.getInput('only-allow');\n    const detailsOutputPath = core.getInput('details-output-path');\n    const detailsOutputFormat = core.getInput(\n      'details-output-format'\n    ) as DetailsOutputFormat;\n    const excludePackages = core.getInput('exclude-packages');\n    const excludePackagesStartingWith = core.getInput(\n      'exclude-packages-starting-with'\n    );\n\n    if (!Object.values(DependencyType).includes(dependencyType)) {\n      core.setFailed(\n        `Invalid dependency-type: ${dependencyType}. Allowed values are: ${Object.values(\n          DependencyType\n        ).join(', ')}`\n      );\n      return;\n    }\n\n    if (!Object.values(DetailsOutputFormat).includes(detailsOutputFormat)) {\n      core.setFailed(\n        `Invalid details-output-format: ${detailsOutputFormat}. Allowed values are: ${Object.values(\n          DetailsOutputFormat\n        ).join(', ')}`\n      );\n      return;\n    }\n\n    if (!fs.existsSync(path.resolve(startPath))) {\n      core.setFailed(\n        `The file specified by start-path does not exist: ${startPath}`\n      );\n      return;\n    }\n\n    if (customFieldsPath && !fs.existsSync(path.resolve(customFieldsPath))) {\n      core.setFailed(\n        `The file specified by custom-fields-path does not exist: ${customFieldsPath}`\n      );\n      return;\n    }\n\n    if (\n      clarificationsPath &&\n      !fs.existsSync(path.resolve(clarificationsPath))\n    ) {\n      core.setFailed(\n        `The file specified by clarifications-path does not exist: ${clarificationsPath}`\n      );\n    }\n\n    let customFields: Record<string, any> | undefined = {\n      name: '',\n      version: '',\n      licenses: '',\n      licenseText: '',\n    };\n    if (customFieldsPath) {\n      try {\n        const customFieldsContent = fs.readFileSync(\n          path.resolve(customFieldsPath),\n          'utf8'\n        );\n        customFields = JSON.parse(customFieldsContent);\n      } catch (error) {\n        core.setFailed(\n          `Error reading or parsing customFieldsPath: ${\n            (error as Error).message\n          }`\n        );\n        return;\n      }\n    }\n\n    const result = await checkLicenses(licenseChecker, {\n      startPath,\n      dependencyType,\n      customFields,\n      onlyAllow,\n      detailsOutputPath,\n      excludePackages,\n      excludePackagesStartingWith,\n      detailsOutputFormat,\n      clarificationsPath\n    });\n\n    core.info(licenseChecker.asSummary(result))\n  } catch (error) {\n    core.setFailed(`Error checking licenses: ${(error as Error).message}`);\n  }\n}\n"]}